// Generated by ReScript, PLEASE EDIT WITH CARE

import * as ColorPalette from "./ColorPalette.res.mjs";
import * as TailwindTypes from "./TailwindTypes.res.mjs";

function colorToClass(color) {
  switch (color) {
    case "Primary" :
        return "text-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.primary, "C900") + "]";
    case "Secondary" :
        return "text-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.neutral, "C600") + "]";
    case "Tertiary" :
        return "text-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.neutral, "C400") + "]";
    case "Muted" :
        return "text-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.neutral, "C300") + "]";
    case "Inverse" :
        return "text-white";
    case "Success" :
        return "text-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.success, "C600") + "]";
    case "Warning" :
        return "text-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.warning, "C600") + "]";
    case "Error" :
        return "text-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.error, "C600") + "]";
    case "Info" :
        return "text-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.info, "C500") + "]";
    
  }
}

function backgroundColorToClass(color) {
  switch (color) {
    case "Primary" :
        return "bg-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.primary, "C900") + "]";
    case "Secondary" :
        return "bg-transparent";
    case "Tertiary" :
        return "bg-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.neutral, "C100") + "]";
    case "Muted" :
        return "bg-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.neutral, "C50") + "]";
    case "Inverse" :
        return "bg-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.neutral, "C900") + "]";
    case "Success" :
        return "bg-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.success, "C600") + "]";
    case "Warning" :
        return "bg-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.warning, "C500") + "]";
    case "Error" :
        return "bg-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.error, "C600") + "]";
    case "Info" :
        return "bg-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.info, "C500") + "]";
    
  }
}

function borderColorToClass(color) {
  switch (color) {
    case "Primary" :
        return "border-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.primary, "C900") + "]";
    case "Secondary" :
        return "border-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.neutral, "C300") + "]";
    case "Tertiary" :
        return "border-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.neutral, "C200") + "]";
    case "Muted" :
        return "border-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.neutral, "C100") + "]";
    case "Inverse" :
        return "border-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.neutral, "C700") + "]";
    case "Success" :
        return "border-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.success, "C600") + "]";
    case "Warning" :
        return "border-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.warning, "C500") + "]";
    case "Error" :
        return "border-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.error, "C600") + "]";
    case "Info" :
        return "border-[" + ColorPalette.getColorFromScale(ColorPalette.defaultPalette.info, "C500") + "]";
    
  }
}

function cx(classes) {
  return classes.filter(function (cls) {
                return cls !== "";
              }).join(" ");
}

function textStyleToClasses(style) {
  switch (style) {
    case "Display" :
        return [
                TailwindTypes.fontSizeToClass("XL6"),
                TailwindTypes.fontWeightToClass("ExtraLight"),
                TailwindTypes.lineHeightToClass("Tight"),
                colorToClass("Primary")
              ];
    case "Title" :
        return [
                TailwindTypes.fontSizeToClass("XL4"),
                TailwindTypes.fontWeightToClass("Light"),
                TailwindTypes.lineHeightToClass("Tight"),
                colorToClass("Primary")
              ];
    case "Heading" :
        return [
                TailwindTypes.fontSizeToClass("XL2"),
                TailwindTypes.fontWeightToClass("SemiBold"),
                TailwindTypes.lineHeightToClass("Normal"),
                colorToClass("Primary")
              ];
    case "Subheading" :
        return [
                TailwindTypes.fontSizeToClass("LG"),
                TailwindTypes.fontWeightToClass("Medium"),
                TailwindTypes.lineHeightToClass("Normal"),
                colorToClass("Secondary")
              ];
    case "Body" :
        return [
                TailwindTypes.fontSizeToClass("Base"),
                TailwindTypes.fontWeightToClass("Normal"),
                TailwindTypes.lineHeightToClass("Relaxed"),
                colorToClass("Secondary")
              ];
    case "Caption" :
        return [
                TailwindTypes.fontSizeToClass("SM"),
                TailwindTypes.fontWeightToClass("Medium"),
                TailwindTypes.lineHeightToClass("Normal"),
                colorToClass("Tertiary")
              ];
    case "Label" :
        return [
                TailwindTypes.fontSizeToClass("SM"),
                TailwindTypes.fontWeightToClass("Medium"),
                TailwindTypes.lineHeightToClass("Normal"),
                colorToClass("Primary")
              ];
    
  }
}

var Typography = {
  textStyleToClasses: textStyleToClasses
};

export {
  colorToClass ,
  backgroundColorToClass ,
  borderColorToClass ,
  cx ,
  Typography ,
}
/* ColorPalette Not a pure module */
