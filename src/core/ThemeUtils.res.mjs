// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Themes from "./Themes.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as DesignSystem from "./DesignSystem.res.mjs";

function generateThemeVariables(theme) {
  var colorVars = [
    {
      name: "--color-primary",
      value: Themes.resolveColor("Primary", theme).replace("text-", "")
    },
    {
      name: "--color-secondary",
      value: Themes.resolveColor("Secondary", theme).replace("text-", "")
    },
    {
      name: "--color-tertiary",
      value: Themes.resolveColor("Tertiary", theme).replace("text-", "")
    },
    {
      name: "--color-muted",
      value: Themes.resolveColor("Muted", theme).replace("text-", "")
    },
    {
      name: "--color-inverse",
      value: Themes.resolveColor("Inverse", theme).replace("text-", "")
    },
    {
      name: "--color-success",
      value: Themes.resolveColor("Success", theme).replace("text-", "")
    },
    {
      name: "--color-warning",
      value: Themes.resolveColor("Warning", theme).replace("text-", "")
    },
    {
      name: "--color-error",
      value: Themes.resolveColor("Error", theme).replace("text-", "")
    },
    {
      name: "--color-info",
      value: Themes.resolveColor("Info", theme).replace("text-", "")
    }
  ];
  var backgroundVars = [
    {
      name: "--bg-primary",
      value: Themes.resolveBackgroundColor("Primary", theme).replace("bg-", "")
    },
    {
      name: "--bg-secondary",
      value: Themes.resolveBackgroundColor("Secondary", theme).replace("bg-", "")
    },
    {
      name: "--bg-tertiary",
      value: Themes.resolveBackgroundColor("Tertiary", theme).replace("bg-", "")
    }
  ];
  var motionVars;
  motionVars = theme === "ReducedMotion" ? [
      {
        name: "--transition-duration",
        value: "0ms"
      },
      {
        name: "--animation-duration",
        value: "0ms"
      }
    ] : [
      {
        name: "--transition-duration",
        value: "200ms"
      },
      {
        name: "--animation-duration",
        value: "300ms"
      }
    ];
  return colorVars.concat(backgroundVars.concat(motionVars));
}

function variablesToCSS(vars) {
  return vars.map(function ($$var) {
                return $$var.name + ": " + $$var.value + ";";
              }).join("\n  ");
}

function generateThemeCSS(theme) {
  var vars = generateThemeVariables(theme);
  var selector;
  switch (theme) {
    case "Light" :
        selector = ":root, [data-theme=\"light\"]";
        break;
    case "Dark" :
        selector = "[data-theme=\"dark\"]";
        break;
    case "HighContrast" :
        selector = "[data-theme=\"high-contrast\"]";
        break;
    case "ReducedMotion" :
        selector = "[data-theme=\"reduced-motion\"]";
        break;
    case "Sepia" :
        selector = "[data-theme=\"sepia\"]";
        break;
    
  }
  return selector + " {\n  " + variablesToCSS(vars) + "\n}";
}

var CSSVariables = {
  generateThemeVariables: generateThemeVariables,
  variablesToCSS: variablesToCSS,
  generateThemeCSS: generateThemeCSS
};

var defaultConfig_properties = [
  "color",
  "background-color",
  "border-color"
];

var defaultConfig = {
  duration: 300,
  easing: "cubic-bezier(0.4, 0, 0.2, 1)",
  properties: defaultConfig_properties
};

function getTransitionClasses(theme, configOpt, param) {
  var config = configOpt !== undefined ? configOpt : defaultConfig;
  if (theme === "ReducedMotion") {
    return ["transition-none"];
  } else {
    return [
            "transition-all",
            "duration-" + config.duration.toString(),
            "ease-" + config.easing
          ];
  }
}

function generateTransitionCSS(theme, configOpt, param) {
  var config = configOpt !== undefined ? configOpt : defaultConfig;
  if (theme === "ReducedMotion") {
    return "transition: none;";
  }
  var properties = config.properties.join(", ");
  return "transition: " + properties + " " + config.duration.toString() + "ms " + config.easing + ";";
}

var Transitions = {
  defaultConfig: defaultConfig,
  getTransitionClasses: getTransitionClasses,
  generateTransitionCSS: generateTransitionCSS
};

function themedComponent(baseClasses, theme, colorPropsOpt) {
  var colorProps = colorPropsOpt !== undefined ? colorPropsOpt : [];
  var themedClasses = colorProps.map(function (param) {
        var prop = param[1];
        var color = param[0];
        if (prop === "border") {
          return Themes.resolveBorderColor(color, theme);
        } else if (prop === "bg") {
          return Themes.resolveBackgroundColor(color, theme);
        } else {
          return Themes.resolveColor(color, theme);
        }
      });
  var motionClasses = Themes.Motion.getMotionClasses(theme);
  return DesignSystem.cx(baseClasses.concat(themedClasses.concat(motionClasses)));
}

function getContrastingColor(backgroundColor, theme) {
  switch (backgroundColor) {
    case "Primary" :
        switch (theme) {
          case "Light" :
              return "Inverse";
          default:
            return "Primary";
        }
    case "Secondary" :
    case "Tertiary" :
    case "Muted" :
        break;
    default:
      return "Primary";
  }
  switch (theme) {
    case "Dark" :
        return "Inverse";
    default:
      return "Primary";
  }
}

function interactiveClasses(theme, baseColor, hoverColor, focusColor, param) {
  var baseClass = Themes.resolveColor(baseColor, theme);
  var hoverClass = hoverColor !== undefined ? "hover:" + Themes.resolveColor(hoverColor, theme) : "hover:" + Themes.resolveColor("Secondary", theme);
  var focusClass = focusColor !== undefined ? "focus:" + Themes.resolveColor(focusColor, theme) : "focus:" + Themes.resolveColor("Primary", theme);
  var motionClasses = Themes.Motion.getMotionClasses(theme);
  return Belt_Array.concatMany([
              [
                baseClass,
                hoverClass,
                focusClass
              ],
              motionClasses
            ]);
}

var ComponentHelpers = {
  themedComponent: themedComponent,
  getContrastingColor: getContrastingColor,
  interactiveClasses: interactiveClasses
};

function getThemeInfo(theme) {
  var name;
  switch (theme) {
    case "Light" :
        name = "Light";
        break;
    case "Dark" :
        name = "Dark";
        break;
    case "HighContrast" :
        name = "High Contrast";
        break;
    case "ReducedMotion" :
        name = "Reduced Motion";
        break;
    case "Sepia" :
        name = "Sepia";
        break;
    
  }
  var colors = [
    [
      "Primary",
      Themes.resolveColor("Primary", theme)
    ],
    [
      "Secondary",
      Themes.resolveColor("Secondary", theme)
    ],
    [
      "Tertiary",
      Themes.resolveColor("Tertiary", theme)
    ],
    [
      "Success",
      Themes.resolveColor("Success", theme)
    ],
    [
      "Warning",
      Themes.resolveColor("Warning", theme)
    ],
    [
      "Error",
      Themes.resolveColor("Error", theme)
    ]
  ];
  var accessibility_highContrast = theme === "HighContrast";
  var accessibility_reducedMotion = theme === "ReducedMotion";
  var accessibility = {
    highContrast: accessibility_highContrast,
    reducedMotion: accessibility_reducedMotion
  };
  return {
          name: name,
          colors: colors,
          accessibility: accessibility
        };
}

function debugThemePreview(theme) {
  var info = getThemeInfo(theme);
  var colorSwatches = info.colors.map(function (param) {
          return "<div class=\"" + param[1] + " p-2\">" + param[0] + "</div>";
        }).join("");
  return "<div class=\"p-4 border rounded " + Themes.resolveBackgroundColor("Primary", theme) + "\">\n      <h3 class=\"" + Themes.resolveColor("Primary", theme) + " font-bold\">" + info.name + " Theme</h3>\n      <div class=\"mt-2 space-y-1\">\n        " + colorSwatches + "\n      </div>\n      <div class=\"mt-2 text-sm " + Themes.resolveColor("Tertiary", theme) + "\">\n        High Contrast: " + (
          info.accessibility.highContrast ? "Yes" : "No"
        ) + "<br>\n        Reduced Motion: " + (
          info.accessibility.reducedMotion ? "Yes" : "No"
        ) + "\n      </div>\n    </div>";
}

var Debug = {
  getThemeInfo: getThemeInfo,
  debugThemePreview: debugThemePreview
};

var cache = {
  contents: new Map()
};

function memoizedResolveColor(color, theme) {
  var key = color + ":" + theme;
  var result = cache.contents.get(key);
  if (result !== undefined) {
    return result;
  }
  var result$1 = Themes.resolveColor(color, theme);
  cache.contents.set(key, result$1);
  return result$1;
}

function batchResolveColors(colors, theme) {
  return colors.map(function (color) {
              return memoizedResolveColor(color, theme);
            });
}

function clearCache() {
  cache.contents = new Map();
}

var $$Performance = {
  cache: cache,
  memoizedResolveColor: memoizedResolveColor,
  batchResolveColors: batchResolveColors,
  clearCache: clearCache
};

var DS;

var resolveThemedColor = memoizedResolveColor;

var createThemedComponent = themedComponent;

var getThemeTransitions = getTransitionClasses;

export {
  DS ,
  CSSVariables ,
  Transitions ,
  ComponentHelpers ,
  Debug ,
  $$Performance ,
  resolveThemedColor ,
  createThemedComponent ,
  generateThemeCSS ,
  getThemeTransitions ,
}
/* cache Not a pure module */
