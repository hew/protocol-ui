// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Themes from "./Themes.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ColorTheory from "./ColorTheory.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as DesignSystem from "./DesignSystem.res.mjs";
import * as ThemeCustomizer from "./ThemeCustomizer.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

var themeContext = React.createContext({
      currentTheme: Themes.defaultTheme,
      paletteConfig: undefined,
      setTheme: (function (param) {
          
        }),
      setPaletteTheme: (function (param) {
          
        }),
      toggleTheme: (function () {
          
        }),
      systemTheme: Themes.defaultTheme,
      userPreference: undefined
    });

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var make = themeContext.Provider;

var Provider = {
  makeProps: makeProps,
  make: make
};

function ThemeContext$ThemeProvider(props) {
  var initialPaletteConfig = props.initialPaletteConfig;
  var initialTheme = props.initialTheme;
  var match = React.useState(function () {
        if (initialTheme !== undefined) {
          return initialTheme;
        } else {
          return Themes.Detection.getSystemTheme();
        }
      });
  var setCurrentTheme = match[1];
  var currentTheme = match[0];
  var match$1 = React.useState(function () {
        return initialPaletteConfig;
      });
  var setPaletteConfig = match$1[1];
  var paletteConfig = match$1[0];
  var match$2 = React.useState(function () {
        return Themes.Detection.getSystemTheme();
      });
  var systemTheme = match$2[0];
  var match$3 = React.useState(function () {
        return initialTheme;
      });
  var setUserPreference = match$3[1];
  var userPreference = match$3[0];
  React.useEffect((function () {
          return (function () {
                    
                  });
        }), []);
  React.useEffect((function () {
          var resolvedTheme = Themes.Detection.resolveTheme(userPreference, systemTheme, undefined);
          setCurrentTheme(function (param) {
                return resolvedTheme;
              });
        }), [
        userPreference,
        systemTheme
      ]);
  React.useEffect((function () {
          if (typeof undefined !== "undefined") {
            var themeClass = Themes.Classes.themeClasses(currentTheme);
            console.log("Theme changed to:", themeClass);
          }
          
        }), [currentTheme]);
  var setTheme = function (theme) {
    setUserPreference(function (param) {
          return theme;
        });
    if (paletteConfig !== undefined) {
      setPaletteConfig(function (param) {
            return {
                    baseColors: paletteConfig.baseColors,
                    palette: paletteConfig.palette,
                    mode: theme,
                    semanticOverrides: paletteConfig.semanticOverrides,
                    scaleWeights: paletteConfig.scaleWeights
                  };
          });
    }
    
  };
  var setPaletteTheme = function (config) {
    setPaletteConfig(function (param) {
          return config;
        });
    setCurrentTheme(function (param) {
          return config.mode;
        });
    setUserPreference(function (param) {
          return config.mode;
        });
  };
  var toggleTheme = function () {
    var newTheme;
    newTheme = currentTheme === "Light" ? "Dark" : "Light";
    setTheme(newTheme);
  };
  var contextValue = {
    currentTheme: currentTheme,
    paletteConfig: paletteConfig,
    setTheme: setTheme,
    setPaletteTheme: setPaletteTheme,
    toggleTheme: toggleTheme,
    systemTheme: systemTheme,
    userPreference: userPreference
  };
  return JsxRuntime.jsx(make, {
              value: contextValue,
              children: props.children
            });
}

var ThemeProvider = {
  make: ThemeContext$ThemeProvider
};

function useTheme() {
  return React.useContext(themeContext);
}

function useThemedStyle() {
  var match = React.useContext(themeContext);
  var paletteConfig = match.paletteConfig;
  var currentTheme = match.currentTheme;
  var match$1;
  if (paletteConfig !== undefined) {
    var paletteStyle = ThemeCustomizer.createPaletteThemedStyle(paletteConfig);
    match$1 = [
      (function (color) {
          return paletteStyle.resolveColor(color);
        }),
      (function (color) {
          return paletteStyle.resolveBackground(color);
        }),
      (function (color) {
          return paletteStyle.resolveBorder(color);
        }),
      paletteStyle
    ];
  } else {
    match$1 = [
      (function (color) {
          return Themes.resolveColor(color, currentTheme);
        }),
      (function (color) {
          return Themes.resolveBackgroundColor(color, currentTheme);
        }),
      (function (color) {
          return Themes.resolveBorderColor(color, currentTheme);
        }),
      undefined
    ];
  }
  var paletteStyle$1 = match$1[3];
  var resolveBorderFn = match$1[2];
  var resolveBackgroundFn = match$1[1];
  var resolveColorFn = match$1[0];
  var resolveTypography = function (style) {
    return Themes.Typography.resolveTextStyle(style, currentTheme);
  };
  var getMotionClasses = function () {
    return Themes.Motion.getMotionClasses(currentTheme);
  };
  var shouldAnimate = function () {
    return Themes.Motion.shouldAnimate(currentTheme);
  };
  var getColorClass = function (color) {
    if (paletteStyle$1 !== undefined) {
      return paletteStyle$1.getColorClass(color);
    } else {
      return resolveColorFn(color);
    }
  };
  var getBackgroundClass = function (color) {
    if (paletteStyle$1 !== undefined) {
      return paletteStyle$1.getBackgroundClass(color);
    } else {
      return resolveBackgroundFn(color);
    }
  };
  var getBorderClass = function (color) {
    if (paletteStyle$1 !== undefined) {
      return paletteStyle$1.getBorderClass(color);
    } else {
      return resolveBorderFn(color);
    }
  };
  var isPaletteTheme = function () {
    return Core__Option.isSome(paletteConfig);
  };
  var getPalette = function () {
    return Core__Option.map(paletteConfig, (function (config) {
                  return config.palette;
                }));
  };
  var getTextColorClass = function (color) {
    return getColorClass(color);
  };
  var getBgColorClass = function (color) {
    return getBackgroundClass(color);
  };
  return {
          resolveColor: resolveColorFn,
          resolveBackground: resolveBackgroundFn,
          resolveBorder: resolveBorderFn,
          resolveTypography: resolveTypography,
          getMotionClasses: getMotionClasses,
          shouldAnimate: shouldAnimate,
          getColorClass: getColorClass,
          getBackgroundClass: getBackgroundClass,
          getBorderClass: getBorderClass,
          isPaletteTheme: isPaletteTheme,
          getPalette: getPalette,
          getTextColorClass: getTextColorClass,
          getBgColorClass: getBgColorClass
        };
}

function withTheme(component) {
  return function () {
    var themeContext$1 = React.useContext(themeContext);
    var themedStyle = useThemedStyle();
    var themedProps_theme = themeContext$1.currentTheme;
    var themedProps = {
      theme: themedProps_theme,
      themedStyle: themedStyle
    };
    return React.createElement(component, themedProps);
  };
}

var ThemeAware = {
  withTheme: withTheme
};

function ThemeContext$ThemeToggle(props) {
  var children = props.children;
  var __className = props.className;
  var className = __className !== undefined ? __className : "";
  var match = React.useContext(themeContext);
  var toggleTheme = match.toggleTheme;
  var themedStyle = useThemedStyle();
  var buttonClasses = DesignSystem.cx(Belt_Array.concatMany([
            [
              "px-3 py-2 rounded-md transition-colors",
              themedStyle.resolveBackground("Secondary"),
              themedStyle.resolveColor("Primary"),
              "hover:" + themedStyle.resolveBackground("Tertiary")
            ],
            themedStyle.getMotionClasses(),
            [className]
          ]));
  var tmp;
  if (children !== undefined) {
    tmp = Caml_option.valFromOption(children);
  } else {
    switch (match.currentTheme) {
      case "Light" :
          tmp = "üåô";
          break;
      case "Dark" :
          tmp = "‚òÄÔ∏è";
          break;
      default:
        tmp = "üé®";
    }
  }
  return JsxRuntime.jsx("button", {
              children: tmp,
              className: buttonClasses,
              onClick: (function (param) {
                  toggleTheme();
                })
            });
}

var ThemeToggle = {
  make: ThemeContext$ThemeToggle
};

function ThemeContext$ThemeSelector(props) {
  var __className = props.className;
  var className = __className !== undefined ? __className : "";
  var match = React.useContext(themeContext);
  var setTheme = match.setTheme;
  var themedStyle = useThemedStyle();
  var selectClasses = DesignSystem.cx(Belt_Array.concatMany([
            [
              "px-3 py-2 rounded-md border",
              themedStyle.getBackgroundClass("Primary"),
              themedStyle.getColorClass("Primary"),
              themedStyle.getBorderClass("Primary")
            ],
            themedStyle.getMotionClasses(),
            [className]
          ]));
  var themeOptions = [
    [
      "Light",
      "Light"
    ],
    [
      "Dark",
      "Dark"
    ],
    [
      "HighContrast",
      "High Contrast"
    ],
    [
      "ReducedMotion",
      "Reduced Motion"
    ],
    [
      "Sepia",
      "Sepia"
    ]
  ];
  var tmp;
  switch (match.currentTheme) {
    case "Light" :
        tmp = "light";
        break;
    case "Dark" :
        tmp = "dark";
        break;
    case "HighContrast" :
        tmp = "high-contrast";
        break;
    case "ReducedMotion" :
        tmp = "reduced-motion";
        break;
    case "Sepia" :
        tmp = "sepia";
        break;
    
  }
  return JsxRuntime.jsx("select", {
              children: themeOptions.map(function (param) {
                    var label = param[1];
                    return JsxRuntime.jsx("option", {
                                children: label,
                                value: label.toLowerCase()
                              }, label);
                  }),
              className: selectClasses,
              value: tmp,
              onChange: (function ($$event) {
                  var value = $$event.target.value;
                  var newTheme;
                  switch (value) {
                    case "dark" :
                        newTheme = "Dark";
                        break;
                    case "high-contrast" :
                        newTheme = "HighContrast";
                        break;
                    case "reduced-motion" :
                        newTheme = "ReducedMotion";
                        break;
                    case "sepia" :
                        newTheme = "Sepia";
                        break;
                    default:
                      newTheme = "Light";
                  }
                  setTheme(newTheme);
                })
            });
}

var ThemeSelector = {
  make: ThemeContext$ThemeSelector
};

function ThemeContext$PaletteThemeConfigurator(props) {
  var onConfigChange = props.onConfigChange;
  var __className = props.className;
  var className = __className !== undefined ? __className : "";
  var match = React.useContext(themeContext);
  var setPaletteTheme = match.setPaletteTheme;
  var paletteConfig = match.paletteConfig;
  var currentTheme = match.currentTheme;
  var themedStyle = useThemedStyle();
  var match$1 = React.useState(function () {
        return "#2563eb";
      });
  var setBrandColor = match$1[1];
  var brandColor = match$1[0];
  var match$2 = React.useState(function () {
        return "corporate";
      });
  var setSelectedPreset = match$2[1];
  var selectedPreset = match$2[0];
  var match$3 = React.useState(function () {
        return false;
      });
  var setIsExpanded = match$3[1];
  var isExpanded = match$3[0];
  var containerClasses = DesignSystem.cx([
        "p-4 rounded-lg border",
        themedStyle.getBackgroundClass("Secondary"),
        themedStyle.getBorderClass("Primary"),
        className
      ]);
  var inputClasses = DesignSystem.cx([
        "px-3 py-2 rounded border",
        themedStyle.getBackgroundClass("Primary"),
        themedStyle.getColorClass("Primary"),
        themedStyle.getBorderClass("Primary")
      ]);
  var buttonClasses = DesignSystem.cx(Belt_Array.concatMany([
            [
              "px-4 py-2 rounded font-medium",
              themedStyle.getBackgroundClass("Primary"),
              themedStyle.getColorClass("Inverse"),
              "hover:opacity-90"
            ],
            themedStyle.getMotionClasses()
          ]));
  var applyPaletteTheme = function () {
    var color = ColorTheory.Utils.parse(brandColor);
    if (color === undefined) {
      return ;
    }
    var config = selectedPreset === "vibrant" ? ThemeCustomizer.Presets.vibrant(color, currentTheme, undefined) : (
        selectedPreset === "corporate" ? ThemeCustomizer.Presets.corporate(color, currentTheme, undefined) : (
            selectedPreset === "balanced" ? ThemeCustomizer.Presets.balanced(color, currentTheme, undefined) : (
                selectedPreset === "custom" ? ThemeCustomizer.createPaletteTheme(color, "corporate", currentTheme, undefined, undefined, undefined, undefined) : ThemeCustomizer.Presets.minimal(color, currentTheme, undefined)
              )
          )
      );
    setPaletteTheme(config);
    if (onConfigChange !== undefined) {
      return onConfigChange(config);
    }
    
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("h3", {
                              children: "Color Palette Theme",
                              className: themedStyle.getColorClass("Primary") + " font-semibold"
                            }),
                        JsxRuntime.jsx("button", {
                              children: isExpanded ? "Collapse" : "Configure",
                              className: "text-sm underline",
                              onClick: (function (param) {
                                  setIsExpanded(function (prev) {
                                        return !prev;
                                      });
                                })
                            })
                      ],
                      className: "flex items-center justify-between mb-4"
                    }),
                isExpanded ? JsxRuntime.jsxs("div", {
                        children: [
                          JsxRuntime.jsxs("div", {
                                children: [
                                  JsxRuntime.jsx("label", {
                                        children: "Brand Color",
                                        className: themedStyle.getColorClass("Secondary") + " block text-sm font-medium mb-2"
                                      }),
                                  JsxRuntime.jsxs("div", {
                                        children: [
                                          JsxRuntime.jsx("input", {
                                                className: inputClasses + " w-16 h-10",
                                                type: "color",
                                                value: brandColor,
                                                onChange: (function ($$event) {
                                                    setBrandColor($$event.target.value);
                                                  })
                                              }),
                                          JsxRuntime.jsx("input", {
                                                className: inputClasses + " flex-1",
                                                placeholder: "#2563eb",
                                                type: "text",
                                                value: brandColor,
                                                onChange: (function ($$event) {
                                                    setBrandColor($$event.target.value);
                                                  })
                                              })
                                        ],
                                        className: "flex gap-2"
                                      })
                                ]
                              }),
                          JsxRuntime.jsxs("div", {
                                children: [
                                  JsxRuntime.jsx("label", {
                                        children: "Palette Style",
                                        className: themedStyle.getColorClass("Secondary") + " block text-sm font-medium mb-2"
                                      }),
                                  JsxRuntime.jsxs("select", {
                                        children: [
                                          JsxRuntime.jsx("option", {
                                                children: "Corporate - Professional & Accessible",
                                                value: "corporate"
                                              }),
                                          JsxRuntime.jsx("option", {
                                                children: "Vibrant - Rich & Colorful",
                                                value: "vibrant"
                                              }),
                                          JsxRuntime.jsx("option", {
                                                children: "Balanced - Complementary Harmony",
                                                value: "balanced"
                                              }),
                                          JsxRuntime.jsx("option", {
                                                children: "Minimal - Simple & Clean",
                                                value: "minimal"
                                              })
                                        ],
                                        className: inputClasses,
                                        value: selectedPreset === "vibrant" ? "vibrant" : (
                                            selectedPreset === "corporate" ? "corporate" : (
                                                selectedPreset === "balanced" ? "balanced" : (
                                                    selectedPreset === "custom" ? "custom" : "minimal"
                                                  )
                                              )
                                          ),
                                        onChange: (function ($$event) {
                                            var value = $$event.target.value;
                                            var preset;
                                            switch (value) {
                                              case "balanced" :
                                                  preset = "balanced";
                                                  break;
                                              case "custom" :
                                                  preset = "custom";
                                                  break;
                                              case "minimal" :
                                                  preset = "minimal";
                                                  break;
                                              case "vibrant" :
                                                  preset = "vibrant";
                                                  break;
                                              default:
                                                preset = "corporate";
                                            }
                                            setSelectedPreset(function (param) {
                                                  return preset;
                                                });
                                          })
                                      })
                                ]
                              }),
                          JsxRuntime.jsxs("div", {
                                children: [
                                  JsxRuntime.jsx("button", {
                                        children: "Apply Palette Theme",
                                        className: buttonClasses,
                                        onClick: (function (param) {
                                            applyPaletteTheme();
                                          })
                                      }),
                                  JsxRuntime.jsx("button", {
                                        children: "Reset to Default",
                                        className: buttonClasses + " opacity-70",
                                        onClick: (function (param) {
                                            console.log("Reset to default theme - implementation needed");
                                          })
                                      })
                                ],
                                className: "flex gap-2"
                              }),
                          paletteConfig !== undefined ? JsxRuntime.jsx("div", {
                                  children: JsxRuntime.jsx("p", {
                                        children: "Active palette: " + paletteConfig.palette.name,
                                        className: "text-sm text-gray-600 dark:text-gray-400"
                                      }),
                                  className: "mt-4 p-3 rounded bg-gray-50 dark:bg-gray-800"
                                }) : null
                        ],
                        className: "space-y-4"
                      }) : null
              ],
              className: containerClasses
            });
}

var PaletteThemeConfigurator = {
  make: ThemeContext$PaletteThemeConfigurator
};

var TC;

export {
  TC ,
  themeContext ,
  Provider ,
  ThemeProvider ,
  useTheme ,
  useThemedStyle ,
  ThemeAware ,
  ThemeToggle ,
  ThemeSelector ,
  PaletteThemeConfigurator ,
}
/* themeContext Not a pure module */
