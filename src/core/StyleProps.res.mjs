// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as TailwindTypes from "./TailwindTypes.res.mjs";

function toClasses(props) {
  var classes = [];
  var size = props.size;
  var classes$1 = size !== undefined ? classes.concat([TailwindTypes.fontSizeToClass(size)]) : classes;
  var weight = props.weight;
  var classes$2 = weight !== undefined ? classes$1.concat([TailwindTypes.fontWeightToClass(weight)]) : classes$1;
  var align = props.align;
  var classes$3 = align !== undefined ? classes$2.concat([TailwindTypes.textAlignToClass(align)]) : classes$2;
  var lineHeight = props.lineHeight;
  var classes$4 = lineHeight !== undefined ? classes$3.concat([TailwindTypes.lineHeightToClass(lineHeight)]) : classes$3;
  var spacing = props.mt;
  var classes$5 = spacing !== undefined ? classes$4.concat([TailwindTypes.spacingToClass(spacing, "mt")]) : classes$4;
  var spacing$1 = props.mb;
  var classes$6 = spacing$1 !== undefined ? classes$5.concat([TailwindTypes.spacingToClass(spacing$1, "mb")]) : classes$5;
  var spacing$2 = props.ml;
  var classes$7 = spacing$2 !== undefined ? classes$6.concat([TailwindTypes.spacingToClass(spacing$2, "ml")]) : classes$6;
  var spacing$3 = props.mr;
  var classes$8 = spacing$3 !== undefined ? classes$7.concat([TailwindTypes.spacingToClass(spacing$3, "mr")]) : classes$7;
  var spacing$4 = props.mx;
  var classes$9 = spacing$4 !== undefined ? classes$8.concat([TailwindTypes.spacingToClass(spacing$4, "mx")]) : classes$8;
  var spacing$5 = props.my;
  var classes$10 = spacing$5 !== undefined ? classes$9.concat([TailwindTypes.spacingToClass(spacing$5, "my")]) : classes$9;
  var spacing$6 = props.m;
  var classes$11 = spacing$6 !== undefined ? classes$10.concat([TailwindTypes.spacingToClass(spacing$6, "m")]) : classes$10;
  var spacing$7 = props.pt;
  var classes$12 = spacing$7 !== undefined ? classes$11.concat([TailwindTypes.spacingToClass(spacing$7, "pt")]) : classes$11;
  var spacing$8 = props.pb;
  var classes$13 = spacing$8 !== undefined ? classes$12.concat([TailwindTypes.spacingToClass(spacing$8, "pb")]) : classes$12;
  var spacing$9 = props.pl;
  var classes$14 = spacing$9 !== undefined ? classes$13.concat([TailwindTypes.spacingToClass(spacing$9, "pl")]) : classes$13;
  var spacing$10 = props.pr;
  var classes$15 = spacing$10 !== undefined ? classes$14.concat([TailwindTypes.spacingToClass(spacing$10, "pr")]) : classes$14;
  var spacing$11 = props.px;
  var classes$16 = spacing$11 !== undefined ? classes$15.concat([TailwindTypes.spacingToClass(spacing$11, "px")]) : classes$15;
  var spacing$12 = props.py;
  var classes$17 = spacing$12 !== undefined ? classes$16.concat([TailwindTypes.spacingToClass(spacing$12, "py")]) : classes$16;
  var spacing$13 = props.p;
  var classes$18 = spacing$13 !== undefined ? classes$17.concat([TailwindTypes.spacingToClass(spacing$13, "p")]) : classes$17;
  return classes$18.filter(function (cls) {
              return cls !== "";
            });
}

function merge(props1, props2) {
  return {
          size: Core__Option.isSome(props2.size) ? props2.size : props1.size,
          weight: Core__Option.isSome(props2.weight) ? props2.weight : props1.weight,
          align: Core__Option.isSome(props2.align) ? props2.align : props1.align,
          lineHeight: Core__Option.isSome(props2.lineHeight) ? props2.lineHeight : props1.lineHeight,
          mt: Core__Option.isSome(props2.mt) ? props2.mt : props1.mt,
          mb: Core__Option.isSome(props2.mb) ? props2.mb : props1.mb,
          ml: Core__Option.isSome(props2.ml) ? props2.ml : props1.ml,
          mr: Core__Option.isSome(props2.mr) ? props2.mr : props1.mr,
          mx: Core__Option.isSome(props2.mx) ? props2.mx : props1.mx,
          my: Core__Option.isSome(props2.my) ? props2.my : props1.my,
          m: Core__Option.isSome(props2.m) ? props2.m : props1.m,
          pt: Core__Option.isSome(props2.pt) ? props2.pt : props1.pt,
          pb: Core__Option.isSome(props2.pb) ? props2.pb : props1.pb,
          pl: Core__Option.isSome(props2.pl) ? props2.pl : props1.pl,
          pr: Core__Option.isSome(props2.pr) ? props2.pr : props1.pr,
          px: Core__Option.isSome(props2.px) ? props2.px : props1.px,
          py: Core__Option.isSome(props2.py) ? props2.py : props1.py,
          p: Core__Option.isSome(props2.p) ? props2.p : props1.p
        };
}

function mt(spacing) {
  return {
          size: undefined,
          weight: undefined,
          align: undefined,
          lineHeight: undefined,
          mt: spacing,
          mb: undefined,
          ml: undefined,
          mr: undefined,
          mx: undefined,
          my: undefined,
          m: undefined,
          pt: undefined,
          pb: undefined,
          pl: undefined,
          pr: undefined,
          px: undefined,
          py: undefined,
          p: undefined
        };
}

function mb(spacing) {
  return {
          size: undefined,
          weight: undefined,
          align: undefined,
          lineHeight: undefined,
          mt: undefined,
          mb: spacing,
          ml: undefined,
          mr: undefined,
          mx: undefined,
          my: undefined,
          m: undefined,
          pt: undefined,
          pb: undefined,
          pl: undefined,
          pr: undefined,
          px: undefined,
          py: undefined,
          p: undefined
        };
}

function ml(spacing) {
  return {
          size: undefined,
          weight: undefined,
          align: undefined,
          lineHeight: undefined,
          mt: undefined,
          mb: undefined,
          ml: spacing,
          mr: undefined,
          mx: undefined,
          my: undefined,
          m: undefined,
          pt: undefined,
          pb: undefined,
          pl: undefined,
          pr: undefined,
          px: undefined,
          py: undefined,
          p: undefined
        };
}

function mr(spacing) {
  return {
          size: undefined,
          weight: undefined,
          align: undefined,
          lineHeight: undefined,
          mt: undefined,
          mb: undefined,
          ml: undefined,
          mr: spacing,
          mx: undefined,
          my: undefined,
          m: undefined,
          pt: undefined,
          pb: undefined,
          pl: undefined,
          pr: undefined,
          px: undefined,
          py: undefined,
          p: undefined
        };
}

function mx(spacing) {
  return {
          size: undefined,
          weight: undefined,
          align: undefined,
          lineHeight: undefined,
          mt: undefined,
          mb: undefined,
          ml: undefined,
          mr: undefined,
          mx: spacing,
          my: undefined,
          m: undefined,
          pt: undefined,
          pb: undefined,
          pl: undefined,
          pr: undefined,
          px: undefined,
          py: undefined,
          p: undefined
        };
}

function my(spacing) {
  return {
          size: undefined,
          weight: undefined,
          align: undefined,
          lineHeight: undefined,
          mt: undefined,
          mb: undefined,
          ml: undefined,
          mr: undefined,
          mx: undefined,
          my: spacing,
          m: undefined,
          pt: undefined,
          pb: undefined,
          pl: undefined,
          pr: undefined,
          px: undefined,
          py: undefined,
          p: undefined
        };
}

function m(spacing) {
  return {
          size: undefined,
          weight: undefined,
          align: undefined,
          lineHeight: undefined,
          mt: undefined,
          mb: undefined,
          ml: undefined,
          mr: undefined,
          mx: undefined,
          my: undefined,
          m: spacing,
          pt: undefined,
          pb: undefined,
          pl: undefined,
          pr: undefined,
          px: undefined,
          py: undefined,
          p: undefined
        };
}

function pt(spacing) {
  return {
          size: undefined,
          weight: undefined,
          align: undefined,
          lineHeight: undefined,
          mt: undefined,
          mb: undefined,
          ml: undefined,
          mr: undefined,
          mx: undefined,
          my: undefined,
          m: undefined,
          pt: spacing,
          pb: undefined,
          pl: undefined,
          pr: undefined,
          px: undefined,
          py: undefined,
          p: undefined
        };
}

function pb(spacing) {
  return {
          size: undefined,
          weight: undefined,
          align: undefined,
          lineHeight: undefined,
          mt: undefined,
          mb: undefined,
          ml: undefined,
          mr: undefined,
          mx: undefined,
          my: undefined,
          m: undefined,
          pt: undefined,
          pb: spacing,
          pl: undefined,
          pr: undefined,
          px: undefined,
          py: undefined,
          p: undefined
        };
}

function pl(spacing) {
  return {
          size: undefined,
          weight: undefined,
          align: undefined,
          lineHeight: undefined,
          mt: undefined,
          mb: undefined,
          ml: undefined,
          mr: undefined,
          mx: undefined,
          my: undefined,
          m: undefined,
          pt: undefined,
          pb: undefined,
          pl: spacing,
          pr: undefined,
          px: undefined,
          py: undefined,
          p: undefined
        };
}

function pr(spacing) {
  return {
          size: undefined,
          weight: undefined,
          align: undefined,
          lineHeight: undefined,
          mt: undefined,
          mb: undefined,
          ml: undefined,
          mr: undefined,
          mx: undefined,
          my: undefined,
          m: undefined,
          pt: undefined,
          pb: undefined,
          pl: undefined,
          pr: spacing,
          px: undefined,
          py: undefined,
          p: undefined
        };
}

function px(spacing) {
  return {
          size: undefined,
          weight: undefined,
          align: undefined,
          lineHeight: undefined,
          mt: undefined,
          mb: undefined,
          ml: undefined,
          mr: undefined,
          mx: undefined,
          my: undefined,
          m: undefined,
          pt: undefined,
          pb: undefined,
          pl: undefined,
          pr: undefined,
          px: spacing,
          py: undefined,
          p: undefined
        };
}

function py(spacing) {
  return {
          size: undefined,
          weight: undefined,
          align: undefined,
          lineHeight: undefined,
          mt: undefined,
          mb: undefined,
          ml: undefined,
          mr: undefined,
          mx: undefined,
          my: undefined,
          m: undefined,
          pt: undefined,
          pb: undefined,
          pl: undefined,
          pr: undefined,
          px: undefined,
          py: spacing,
          p: undefined
        };
}

function p(spacing) {
  return {
          size: undefined,
          weight: undefined,
          align: undefined,
          lineHeight: undefined,
          mt: undefined,
          mb: undefined,
          ml: undefined,
          mr: undefined,
          mx: undefined,
          my: undefined,
          m: undefined,
          pt: undefined,
          pb: undefined,
          pl: undefined,
          pr: undefined,
          px: undefined,
          py: undefined,
          p: spacing
        };
}

function size(fontSize) {
  return {
          size: fontSize,
          weight: undefined,
          align: undefined,
          lineHeight: undefined,
          mt: undefined,
          mb: undefined,
          ml: undefined,
          mr: undefined,
          mx: undefined,
          my: undefined,
          m: undefined,
          pt: undefined,
          pb: undefined,
          pl: undefined,
          pr: undefined,
          px: undefined,
          py: undefined,
          p: undefined
        };
}

function weight(fontWeight) {
  return {
          size: undefined,
          weight: fontWeight,
          align: undefined,
          lineHeight: undefined,
          mt: undefined,
          mb: undefined,
          ml: undefined,
          mr: undefined,
          mx: undefined,
          my: undefined,
          m: undefined,
          pt: undefined,
          pb: undefined,
          pl: undefined,
          pr: undefined,
          px: undefined,
          py: undefined,
          p: undefined
        };
}

function align(textAlign) {
  return {
          size: undefined,
          weight: undefined,
          align: textAlign,
          lineHeight: undefined,
          mt: undefined,
          mb: undefined,
          ml: undefined,
          mr: undefined,
          mx: undefined,
          my: undefined,
          m: undefined,
          pt: undefined,
          pb: undefined,
          pl: undefined,
          pr: undefined,
          px: undefined,
          py: undefined,
          p: undefined
        };
}

function lineHeight(lineHeight$1) {
  return {
          size: undefined,
          weight: undefined,
          align: undefined,
          lineHeight: lineHeight$1,
          mt: undefined,
          mb: undefined,
          ml: undefined,
          mr: undefined,
          mx: undefined,
          my: undefined,
          m: undefined,
          pt: undefined,
          pb: undefined,
          pl: undefined,
          pr: undefined,
          px: undefined,
          py: undefined,
          p: undefined
        };
}

var Shortcuts = {
  mt: mt,
  mb: mb,
  ml: ml,
  mr: mr,
  mx: mx,
  my: my,
  m: m,
  pt: pt,
  pb: pb,
  pl: pl,
  pr: pr,
  px: px,
  py: py,
  p: p,
  size: size,
  weight: weight,
  align: align,
  lineHeight: lineHeight
};

var empty = {
  size: undefined,
  weight: undefined,
  align: undefined,
  lineHeight: undefined,
  mt: undefined,
  mb: undefined,
  ml: undefined,
  mr: undefined,
  mx: undefined,
  my: undefined,
  m: undefined,
  pt: undefined,
  pb: undefined,
  pl: undefined,
  pr: undefined,
  px: undefined,
  py: undefined,
  p: undefined
};

var sizeToClass = TailwindTypes.fontSizeToClass;

var weightToClass = TailwindTypes.fontWeightToClass;

var alignToClass = TailwindTypes.textAlignToClass;

var lineHeightToClass = TailwindTypes.lineHeightToClass;

var spacingToClass = TailwindTypes.spacingToClass;

export {
  empty ,
  sizeToClass ,
  weightToClass ,
  alignToClass ,
  lineHeightToClass ,
  spacingToClass ,
  toClasses ,
  merge ,
  Shortcuts ,
}
/* No side effect */
