// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ColorTheory from "./ColorTheory.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as PaletteGenerator from "./PaletteGenerator.res.mjs";

var defaultScaleWeights = {
  primary: 600,
  secondary: 500,
  muted: 400
};

function createPaletteTheme(brandColor, generationModeOpt, baseThemeOpt, secondaryColor, accentColor, scaleWeightsOpt, param) {
  var generationMode = generationModeOpt !== undefined ? generationModeOpt : "corporate";
  var baseTheme = baseThemeOpt !== undefined ? baseThemeOpt : "Light";
  var scaleWeights = scaleWeightsOpt !== undefined ? scaleWeightsOpt : defaultScaleWeights;
  var palette = generationMode === "vibrant" ? PaletteGenerator.Presets.vibrant(brandColor) : (
      generationMode === "corporate" ? PaletteGenerator.Presets.corporate(brandColor) : (
          generationMode === "balanced" ? PaletteGenerator.Presets.balanced(brandColor) : PaletteGenerator.Presets.minimal(brandColor)
        )
    );
  return {
          baseColors: {
            primary: brandColor,
            secondary: secondaryColor,
            accent: accentColor
          },
          palette: palette,
          mode: baseTheme,
          semanticOverrides: undefined,
          scaleWeights: scaleWeights
        };
}

function findScaleEntry(palette, weight) {
  return palette.scale.find(function (entry) {
              return entry.weight === weight;
            });
}

function getScaleColor(palette, weight, fallback) {
  var entry = findScaleEntry(palette, weight);
  if (entry !== undefined) {
    return entry.hex;
  } else {
    return fallback;
  }
}

function resolvePaletteColor(color, config) {
  var scaleWeights = config.scaleWeights;
  var semanticOverrides = config.semanticOverrides;
  var mode = config.mode;
  var palette = config.palette;
  var overrideColor = semanticOverrides !== undefined ? Caml_option.valFromOption(semanticOverrides).get(color) : undefined;
  if (overrideColor !== undefined) {
    return ColorTheory.Convert.toHex(overrideColor);
  }
  switch (color) {
    case "Primary" :
        switch (mode) {
          case "Dark" :
              return getScaleColor(palette, 400, "#f9fafb");
          case "HighContrast" :
              return getScaleColor(palette, 900, "#000000");
          case "Light" :
          case "ReducedMotion" :
              return getScaleColor(palette, scaleWeights.primary, "#1f2937");
          case "Sepia" :
              return getScaleColor(palette, 700, "#92400e");
          
        }
    case "Secondary" :
        switch (mode) {
          case "Dark" :
              return getScaleColor(palette, 300, "#d1d5db");
          case "HighContrast" :
              return getScaleColor(palette, 800, "#1f2937");
          case "Light" :
          case "ReducedMotion" :
              return getScaleColor(palette, scaleWeights.secondary, "#374151");
          case "Sepia" :
              return getScaleColor(palette, 600, "#b45309");
          
        }
    case "Tertiary" :
        switch (mode) {
          case "Dark" :
              return getScaleColor(palette, 400, "#9ca3af");
          case "HighContrast" :
              return getScaleColor(palette, 700, "#374151");
          case "Light" :
          case "ReducedMotion" :
              return getScaleColor(palette, scaleWeights.muted, "#6b7280");
          case "Sepia" :
              return getScaleColor(palette, 500, "#d97706");
          
        }
    case "Muted" :
        switch (mode) {
          case "Dark" :
          case "HighContrast" :
              return getScaleColor(palette, 600, "#4b5563");
          case "Light" :
          case "ReducedMotion" :
              return getScaleColor(palette, 300, "#d1d5db");
          case "Sepia" :
              return getScaleColor(palette, 400, "#f59e0b");
          
        }
    case "Inverse" :
        switch (mode) {
          case "Dark" :
              return getScaleColor(palette, 50, "#f9fafb");
          case "HighContrast" :
              return getScaleColor(palette, 50, "#ffffff");
          case "Light" :
          case "ReducedMotion" :
              return getScaleColor(palette, 900, "#111827");
          case "Sepia" :
              return getScaleColor(palette, 100, "#fef3c7");
          
        }
    case "Success" :
        var semantic = palette.semanticColors;
        if (semantic !== undefined) {
          return ColorTheory.Convert.toHex(semantic.success);
        } else {
          return "#059669";
        }
    case "Warning" :
        var semantic$1 = palette.semanticColors;
        if (semantic$1 !== undefined) {
          return ColorTheory.Convert.toHex(semantic$1.warning);
        } else {
          return "#d97706";
        }
    case "Error" :
        var semantic$2 = palette.semanticColors;
        if (semantic$2 !== undefined) {
          return ColorTheory.Convert.toHex(semantic$2.error);
        } else {
          return "#dc2626";
        }
    case "Info" :
        var semantic$3 = palette.semanticColors;
        if (semantic$3 !== undefined) {
          return ColorTheory.Convert.toHex(semantic$3.info);
        } else {
          return "#2563eb";
        }
    
  }
}

function resolvePaletteBackgroundColor(color, config) {
  var mode = config.mode;
  var palette = config.palette;
  switch (color) {
    case "Primary" :
        switch (mode) {
          case "Dark" :
              return getScaleColor(palette, 900, "#111827");
          case "Light" :
          case "HighContrast" :
          case "ReducedMotion" :
              return getScaleColor(palette, 50, "#ffffff");
          case "Sepia" :
              return getScaleColor(palette, 50, "#fffbeb");
          
        }
    case "Secondary" :
        switch (mode) {
          case "Dark" :
              return getScaleColor(palette, 800, "#1f2937");
          case "Light" :
          case "HighContrast" :
          case "ReducedMotion" :
              return getScaleColor(palette, 100, "#f3f4f6");
          case "Sepia" :
              return getScaleColor(palette, 100, "#fef3c7");
          
        }
    case "Tertiary" :
        switch (mode) {
          case "Dark" :
              return getScaleColor(palette, 700, "#374151");
          case "Light" :
          case "HighContrast" :
          case "ReducedMotion" :
              return getScaleColor(palette, 200, "#e5e7eb");
          case "Sepia" :
              return getScaleColor(palette, 200, "#fde68a");
          
        }
    case "Muted" :
        switch (mode) {
          case "Dark" :
              return getScaleColor(palette, 600, "#4b5563");
          case "Light" :
          case "HighContrast" :
          case "ReducedMotion" :
              return getScaleColor(palette, 300, "#d1d5db");
          case "Sepia" :
              return getScaleColor(palette, 300, "#fcd34d");
          
        }
    case "Inverse" :
        switch (mode) {
          case "Dark" :
              return getScaleColor(palette, 50, "#f9fafb");
          case "HighContrast" :
              return getScaleColor(palette, 900, "#000000");
          case "Light" :
          case "ReducedMotion" :
              return getScaleColor(palette, 900, "#111827");
          case "Sepia" :
              return getScaleColor(palette, 800, "#92400e");
          
        }
    default:
      return "transparent";
  }
}

function resolvePaletteBorderColor(color, config) {
  var palette = config.palette;
  if (color !== "Primary") {
    return "transparent";
  }
  switch (config.mode) {
    case "Dark" :
        return getScaleColor(palette, 600, "#4b5563");
    case "HighContrast" :
        return getScaleColor(palette, 900, "#000000");
    case "Light" :
    case "ReducedMotion" :
        return getScaleColor(palette, 300, "#d1d5db");
    case "Sepia" :
        return getScaleColor(palette, 300, "#fcd34d");
    
  }
}

function toPaletteClass(color, config, property) {
  var hex = property === "border" ? resolvePaletteBorderColor(color, config) : (
      property === "bg" ? resolvePaletteBackgroundColor(color, config) : resolvePaletteColor(color, config)
    );
  var prefix = property === "border" ? "border-" : (
      property === "bg" ? "bg-" : "text-"
    );
  return prefix + "[" + hex + "]";
}

function createPaletteThemedStyle(config) {
  return {
          resolveColor: (function (color) {
              return resolvePaletteColor(color, config);
            }),
          resolveBackground: (function (color) {
              return resolvePaletteBackgroundColor(color, config);
            }),
          resolveBorder: (function (color) {
              return resolvePaletteBorderColor(color, config);
            }),
          getColorClass: (function (color) {
              return toPaletteClass(color, config, "text");
            }),
          getBackgroundClass: (function (color) {
              return toPaletteClass(color, config, "bg");
            }),
          getBorderClass: (function (color) {
              return toPaletteClass(color, config, "border");
            }),
          palette: config.palette,
          config: config
        };
}

function corporate(brandColor, baseThemeOpt, param) {
  var baseTheme = baseThemeOpt !== undefined ? baseThemeOpt : "Light";
  var color = Core__Option.getOr(brandColor, {
        TAG: "RGB",
        _0: {
          r: 37.0,
          g: 99.0,
          b: 235.0
        }
      });
  return createPaletteTheme(color, "corporate", baseTheme, undefined, undefined, undefined, undefined);
}

function vibrant(brandColor, baseThemeOpt, param) {
  var baseTheme = baseThemeOpt !== undefined ? baseThemeOpt : "Light";
  var color = Core__Option.getOr(brandColor, {
        TAG: "RGB",
        _0: {
          r: 239.0,
          g: 68.0,
          b: 68.0
        }
      });
  return createPaletteTheme(color, "vibrant", baseTheme, undefined, undefined, undefined, undefined);
}

function balanced(brandColor, baseThemeOpt, param) {
  var baseTheme = baseThemeOpt !== undefined ? baseThemeOpt : "Light";
  var color = Core__Option.getOr(brandColor, {
        TAG: "RGB",
        _0: {
          r: 5.0,
          g: 150.0,
          b: 105.0
        }
      });
  return createPaletteTheme(color, "balanced", baseTheme, undefined, undefined, undefined, undefined);
}

function minimal(brandColor, baseThemeOpt, param) {
  var baseTheme = baseThemeOpt !== undefined ? baseThemeOpt : "Light";
  var color = Core__Option.getOr(brandColor, {
        TAG: "RGB",
        _0: {
          r: 107.0,
          g: 114.0,
          b: 128.0
        }
      });
  return createPaletteTheme(color, "minimal", baseTheme, undefined, undefined, undefined, undefined);
}

var Presets = {
  corporate: corporate,
  vibrant: vibrant,
  balanced: balanced,
  minimal: minimal
};

function toTailwindConfig(config, themeName) {
  return PaletteGenerator.Utils.toTailwindConfig(config.palette, themeName);
}

function toCssVariables(config, themeName) {
  return PaletteGenerator.Utils.toCssVariables(config.palette, themeName);
}

function toThemeExport(config, themeName) {
  var paletteExport = PaletteGenerator.Utils.toCssVariables(config.palette, themeName);
  var semanticMappings = "\n/* Semantic color mappings for " + themeName + " */\n:root[data-theme=\"" + themeName + "\"] {\n  --color-primary: " + resolvePaletteColor("Primary", config) + ";\n  --color-secondary: " + resolvePaletteColor("Secondary", config) + ";\n  --color-tertiary: " + resolvePaletteColor("Tertiary", config) + ";\n  --color-muted: " + resolvePaletteColor("Muted", config) + ";\n  --color-inverse: " + resolvePaletteColor("Inverse", config) + ";\n  --color-success: " + resolvePaletteColor("Success", config) + ";\n  --color-warning: " + resolvePaletteColor("Warning", config) + ";\n  --color-error: " + resolvePaletteColor("Error", config) + ";\n  --color-info: " + resolvePaletteColor("Info", config) + ";\n  \n  --bg-primary: " + resolvePaletteBackgroundColor("Primary", config) + ";\n  --bg-secondary: " + resolvePaletteBackgroundColor("Secondary", config) + ";\n  --bg-tertiary: " + resolvePaletteBackgroundColor("Tertiary", config) + ";\n  --bg-muted: " + resolvePaletteBackgroundColor("Muted", config) + ";\n  --bg-inverse: " + resolvePaletteBackgroundColor("Inverse", config) + ";\n  \n  --border-primary: " + resolvePaletteBorderColor("Primary", config) + ";\n}\n";
  return paletteExport + semanticMappings;
}

var Export = {
  toTailwindConfig: toTailwindConfig,
  toCssVariables: toCssVariables,
  toThemeExport: toThemeExport
};

var CT;

var PG;

var Themes;

export {
  CT ,
  PG ,
  Themes ,
  defaultScaleWeights ,
  createPaletteTheme ,
  findScaleEntry ,
  getScaleColor ,
  resolvePaletteColor ,
  resolvePaletteBackgroundColor ,
  resolvePaletteBorderColor ,
  toPaletteClass ,
  createPaletteThemedStyle ,
  Presets ,
  Export ,
}
/* No side effect */
