// Generated by ReScript, PLEASE EDIT WITH CARE

import * as DesignSystem from "./DesignSystem.res.mjs";

function resolveColor(color, theme) {
  switch (color) {
    case "Primary" :
        switch (theme) {
          case "Light" :
              return "text-neutral-900";
          case "Dark" :
              return "text-white";
          case "HighContrast" :
              return "text-black";
          case "ReducedMotion" :
              return "text-gray-900";
          case "Sepia" :
              return "text-amber-900";
          
        }
    case "Secondary" :
        switch (theme) {
          case "Light" :
              return "text-neutral-600";
          case "Dark" :
              return "text-gray-200";
          case "HighContrast" :
              return "text-gray-800";
          case "ReducedMotion" :
              return "text-gray-700";
          case "Sepia" :
              return "text-amber-800";
          
        }
    case "Tertiary" :
        switch (theme) {
          case "Light" :
              return "text-neutral-400";
          case "Dark" :
              return "text-gray-400";
          case "HighContrast" :
              return "text-gray-700";
          case "ReducedMotion" :
              return "text-gray-500";
          case "Sepia" :
              return "text-amber-600";
          
        }
    case "Muted" :
        switch (theme) {
          case "Light" :
              return "text-neutral-300";
          case "Dark" :
              return "text-gray-500";
          case "HighContrast" :
              return "text-gray-600";
          case "ReducedMotion" :
              return "text-gray-400";
          case "Sepia" :
              return "text-amber-500";
          
        }
    case "Inverse" :
        switch (theme) {
          case "Dark" :
              return "text-gray-900";
          case "Light" :
          case "HighContrast" :
          case "ReducedMotion" :
              return "text-white";
          case "Sepia" :
              return "text-amber-50";
          
        }
    case "Success" :
        switch (theme) {
          case "Dark" :
              return "text-green-400";
          case "HighContrast" :
              return "text-green-800";
          case "Light" :
          case "ReducedMotion" :
          case "Sepia" :
              return "text-green-700";
          
        }
    case "Warning" :
        switch (theme) {
          case "Dark" :
              return "text-amber-400";
          case "HighContrast" :
              return "text-yellow-800";
          case "Light" :
          case "ReducedMotion" :
              return "text-amber-600";
          case "Sepia" :
              return "text-orange-700";
          
        }
    case "Error" :
        switch (theme) {
          case "Dark" :
              return "text-red-400";
          case "HighContrast" :
              return "text-red-800";
          case "Light" :
          case "ReducedMotion" :
              return "text-red-600";
          case "Sepia" :
              return "text-red-700";
          
        }
    case "Info" :
        switch (theme) {
          case "Dark" :
              return "text-blue-400";
          case "HighContrast" :
              return "text-blue-800";
          case "Light" :
          case "ReducedMotion" :
              return "text-blue-600";
          case "Sepia" :
              return "text-indigo-700";
          
        }
    
  }
}

function resolveBackgroundColor(color, theme) {
  switch (color) {
    case "Primary" :
        switch (theme) {
          case "Light" :
              return "bg-neutral-900";
          case "Dark" :
              return "bg-gray-900";
          case "HighContrast" :
          case "ReducedMotion" :
              return "bg-white";
          case "Sepia" :
              return "bg-amber-50";
          
        }
    case "Secondary" :
        switch (theme) {
          case "Light" :
              return "bg-transparent";
          case "Dark" :
              return "bg-gray-800";
          case "HighContrast" :
              return "bg-gray-100";
          case "ReducedMotion" :
              return "bg-gray-50";
          case "Sepia" :
              return "bg-amber-100";
          
        }
    case "Tertiary" :
        switch (theme) {
          case "Light" :
              return "bg-neutral-100";
          case "Dark" :
              return "bg-gray-700";
          case "HighContrast" :
              return "bg-gray-200";
          case "ReducedMotion" :
              return "bg-gray-100";
          case "Sepia" :
              return "bg-amber-200";
          
        }
    case "Muted" :
        switch (theme) {
          case "Light" :
              return "bg-neutral-50";
          case "Dark" :
              return "bg-gray-600";
          case "HighContrast" :
              return "bg-gray-300";
          case "ReducedMotion" :
              return "bg-gray-200";
          case "Sepia" :
              return "bg-amber-300";
          
        }
    case "Inverse" :
        switch (theme) {
          case "Dark" :
              return "bg-white";
          case "HighContrast" :
              return "bg-black";
          case "Light" :
          case "ReducedMotion" :
              return "bg-gray-900";
          case "Sepia" :
              return "bg-amber-900";
          
        }
    default:
      return "bg-transparent";
  }
}

function resolveBorderColor(color, theme) {
  if (color !== "Primary") {
    return "border-transparent";
  }
  switch (theme) {
    case "Light" :
        return "border-neutral-900";
    case "Dark" :
        return "border-gray-600";
    case "HighContrast" :
        return "border-black";
    case "ReducedMotion" :
        return "border-gray-300";
    case "Sepia" :
        return "border-amber-300";
    
  }
}

function getSystemTheme() {
  return "Light";
}

function resolveTheme(userPreference, systemPreference, param) {
  if (userPreference !== undefined) {
    return userPreference;
  } else if (systemPreference !== undefined) {
    return systemPreference;
  } else {
    return "Light";
  }
}

var Detection = {
  getSystemTheme: getSystemTheme,
  resolveTheme: resolveTheme
};

function themeClasses(theme) {
  switch (theme) {
    case "Light" :
        return "theme-light";
    case "Dark" :
        return "theme-dark dark";
    case "HighContrast" :
        return "theme-high-contrast contrast-more";
    case "ReducedMotion" :
        return "theme-reduced-motion motion-reduce";
    case "Sepia" :
        return "theme-sepia";
    
  }
}

function themeDataAttribute(theme) {
  switch (theme) {
    case "Light" :
        return "data-theme=\"light\"";
    case "Dark" :
        return "data-theme=\"dark\"";
    case "HighContrast" :
        return "data-theme=\"high-contrast\"";
    case "ReducedMotion" :
        return "data-theme=\"reduced-motion\"";
    case "Sepia" :
        return "data-theme=\"sepia\"";
    
  }
}

var Classes = {
  themeClasses: themeClasses,
  themeDataAttribute: themeDataAttribute
};

function resolveTextStyle(style, theme) {
  var baseClasses = DesignSystem.Typography.textStyleToClasses(style);
  return baseClasses.map(function (cls) {
              if (!cls.includes("text-")) {
                return cls;
              }
              switch (style) {
                case "Subheading" :
                case "Body" :
                    return resolveColor("Secondary", theme);
                case "Caption" :
                    return resolveColor("Tertiary", theme);
                default:
                  return resolveColor("Primary", theme);
              }
            });
}

var Typography = {
  resolveTextStyle: resolveTextStyle
};

function getMotionClasses(theme) {
  if (theme === "ReducedMotion") {
    return [
            "motion-reduce",
            "transition-none"
          ];
  } else {
    return [
            "transition-all",
            "duration-200",
            "ease-in-out"
          ];
  }
}

function shouldAnimate(theme) {
  if (theme === "ReducedMotion") {
    return false;
  } else {
    return true;
  }
}

var Motion = {
  getMotionClasses: getMotionClasses,
  shouldAnimate: shouldAnimate
};

var DS;

var defaultTheme = "Light";

export {
  DS ,
  resolveColor ,
  resolveBackgroundColor ,
  resolveBorderColor ,
  Detection ,
  Classes ,
  Typography ,
  Motion ,
  defaultTheme ,
}
/* DesignSystem Not a pure module */
