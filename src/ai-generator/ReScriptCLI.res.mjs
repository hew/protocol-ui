// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Path from "path";
import * as Inquirer from "inquirer";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as ReScriptGenerator from "./ReScriptGenerator.res.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function logSuccess(msg) {
  console.log("‚úÖ " + msg);
}

function logError(msg) {
  console.log("‚ùå " + msg);
}

function logInfo(msg) {
  console.log("üí° " + msg);
}

function logTitle(msg) {
  console.log("");
  console.log("ü§ñ " + msg);
  console.log("");
}

async function collectComponentRequest() {
  try {
    var validateDescription = function (input) {
      if (input.trim().length > 0) {
        return true;
      } else {
        return "Please provide a description";
      }
    };
    var qDescription = {
      type_: "input",
      name: "description",
      message: "Describe the component you want to generate:",
      validate: validateDescription
    };
    var validateComponentName = function (input) {
      var trimmed = input.trim();
      if (trimmed === "") {
        return "Component name is required";
      } else if (/^[A-Z][a-zA-Z0-9]*$/.test(trimmed)) {
        return true;
      } else {
        return "Component name must be PascalCase (e.g., MyButton)";
      }
    };
    var qComponentName = {
      type_: "input",
      name: "componentName",
      message: "Component name (PascalCase):",
      validate: validateComponentName
    };
    var choices = [
      {
        name: "Styled (use DesignSystem utilities)",
        value: "styled"
      },
      {
        name: "Minimal (basic styling)",
        value: "minimal"
      },
      {
        name: "Custom (advanced styling)",
        value: "custom"
      }
    ];
    var qStyling = {
      type_: "list",
      name: "styling",
      message: "Styling approach:",
      choices: choices,
      default: "styled"
    };
    var qInteractive = {
      type_: "confirm",
      name: "interactive",
      message: "Does this component need interactive features (click, hover, etc.)?",
      default: false
    };
    var filterProps = function (input) {
      var trimmed = input.trim();
      if (trimmed === "") {
        return ;
      } else {
        return trimmed.split(",").map(function (p) {
                      return p.trim();
                    }).filter(function (p) {
                    return p.length > 0;
                  });
      }
    };
    var qProps = {
      type_: "input",
      name: "props",
      message: "Props needed (comma-separated, optional):",
      filter: filterProps
    };
    var questions = [
      qDescription,
      qComponentName,
      qStyling,
      qInteractive,
      qProps
    ];
    var answers = await Inquirer.prompt(questions);
    var description = answers.description;
    var componentName = answers.componentName;
    var stylingStr = answers.styling;
    var interactive = answers.interactive;
    var propsArray = answers.props;
    var styling;
    switch (stylingStr) {
      case "custom" :
          styling = "custom";
          break;
      case "minimal" :
          styling = "minimal";
          break;
      default:
        styling = "styled";
    }
    var props = !(propsArray == null) ? propsArray : undefined;
    var request = {
      description: description,
      componentName: componentName,
      styling: styling,
      interactive: interactive,
      props: props
    };
    return {
            TAG: "Ok",
            _0: request
          };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    return {
            TAG: "Error",
            _0: "Failed to collect input: " + Core__Option.getOr(exn.message, "Unknown error")
          };
  }
}

function displayResults(result) {
  if (result.success) {
    logSuccess("Component generated successfully!");
    console.log("");
    console.log("Generated ReScript code:");
    console.log("‚îÄ".repeat(50));
    console.log(result.code);
    console.log("‚îÄ".repeat(50));
    console.log("üìä Confidence: " + (result.confidence * 100.0).toString() + "%");
    return ;
  } else {
    logError("Component generation failed");
    console.log("");
    console.log("Compilation errors:");
    result.compilationErrors.forEach(function (error) {
          console.log("  ‚Ä¢ " + error);
        });
    if (result.suggestions.length > 0) {
      console.log("");
      logInfo("Suggestions:");
      result.suggestions.forEach(function (suggestion) {
            console.log("  ‚Ä¢ " + suggestion);
          });
    }
    if (result.code !== "") {
      console.log("");
      console.log("Generated code (with errors):");
      console.log("‚îÄ".repeat(50));
      console.log(result.code);
      console.log("‚îÄ".repeat(50));
      return ;
    } else {
      return ;
    }
  }
}

async function saveComponent(code, componentName) {
  try {
    var componentsDir = Path.join(process.cwd(), "src", "components");
    var fileName = componentName + ".res";
    var filePath = Path.join(componentsDir, fileName, "");
    if (!Fs.existsSync(componentsDir)) {
      Fs.mkdirSync(componentsDir, {
            recursive: true
          });
    }
    if (Fs.existsSync(filePath)) {
      console.log("‚ö†Ô∏è  " + fileName + " already exists, overwriting...");
    }
    Fs.writeFileSync(filePath, code, "utf8");
    logSuccess("Component saved to " + filePath);
    console.log("");
    logInfo("Next steps:");
    console.log("   1. Run: npx rescript");
    console.log("   2. Import in your app: open " + componentName);
    return {
            TAG: "Ok",
            _0: undefined
          };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    return {
            TAG: "Error",
            _0: "Failed to save component: " + Core__Option.getOr(exn.message, "Unknown error")
          };
  }
}

async function promptYesNo(message) {
  try {
    var question = {
      type_: "confirm",
      name: "result",
      message: message,
      default: false
    };
    return (await Inquirer.prompt([question])).result;
  }
  catch (_exn){
    return false;
  }
}

async function runCLI() {
  logTitle("AI ReScript Component Generator");
  try {
    console.log("Initializing AI generator...");
    var generatorResult = ReScriptGenerator.createGenerator();
    var generator;
    if (generatorResult.TAG === "Ok") {
      logSuccess("ReScript Generator initialized successfully");
      generator = generatorResult._0;
    } else {
      logError("Failed to create generator: " + generatorResult._0);
      process.exit(1);
      generator = undefined;
    }
    var requestResult = await collectComponentRequest();
    var request;
    if (requestResult.TAG === "Ok") {
      request = requestResult._0;
    } else {
      logError(requestResult._0);
      process.exit(1);
      request = undefined;
    }
    console.log("");
    console.log("üéØ Generating ReScript component...");
    var result = await ReScriptGenerator.generateComponent(generator, request);
    console.log("");
    displayResults(result);
    if (result.success) {
      console.log("");
      var shouldSave = await promptYesNo("Save component to src/components/?");
      if (shouldSave) {
        var saveResult = await saveComponent(result.code, request.componentName);
        if (saveResult.TAG !== "Ok") {
          logError(saveResult._0);
        }
        
      }
      
    }
    console.log("");
    console.log("üôè Thank you for using the AI ReScript Generator!");
    return ;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    var errorMsg = Core__Option.getOr(exn.message, "Unknown error");
    logError("Generation failed: " + errorMsg);
    process.exit(1);
    return ;
  }
}

var runComponentGenerator = runCLI;

export {
  logSuccess ,
  logError ,
  logInfo ,
  logTitle ,
  collectComponentRequest ,
  displayResults ,
  saveComponent ,
  promptYesNo ,
  runCLI ,
  runComponentGenerator ,
}
/* fs Not a pure module */
